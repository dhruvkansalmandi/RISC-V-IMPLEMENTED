`timescale 1ns / 1ps

module tb_RISC5_complete_factorial;

    // Inputs
    reg clk;
    reg rst;

    // Instantiate the DUT (Device Under Test)
    RISC5_top uut (
        .clk(clk),
        .rst(rst)
    );

    // Clock generation: 20ns period
    always #10 clk = ~clk;

    // Variables to track factorial calculation
    reg [31:0] factorial_result;
    reg [31:0] previous_result;
    integer cycle_count;
    integer result_found;

    initial begin
        // Initialize inputs
        clk = 0;
        rst = 1;
        factorial_result = 0;
        previous_result = 0;
        cycle_count = 0;
        result_found = 0;

        $display("==========================================");
        $display("RISC-V Complete Factorial Calculator Test");
        $display("==========================================");
        $display("Calculating 5! (factorial of 5)");
        $display("Expected Result: 120");
        $display("==========================================");

        // Hold reset active for a short period
        #40;
        rst = 0;
        $display("Reset de-asserted. Starting factorial calculation...");
        $display("");

        // Run simulation for longer time to complete factorial
        #3000;

        // Check final result
        $display("==========================================");
        $display("FINAL FACTORIAL CALCULATION RESULTS:");
        $display("==========================================");
        $display("Register x1 (a1) = %d", uut.RF.registers[1]);
        $display("Register x2 (a2) = %d", uut.RF.registers[2]);
        $display("Register x3 (a3) = %d", uut.RF.registers[3]);
        $display("Register x4 (a4) = %d", uut.RF.registers[4]);
        $display("Register x5 (a5) = %d", uut.RF.registers[5]);
        $display("Register x10 (a0) = %d", uut.RF.registers[10]);
        $display("ALU Output = %d", uut.ALU_out);
        $display("PC = %h", uut.PC);
        $display("Current Instruction = %h", uut.Instr);
        $display("==========================================");

        // Check if factorial result is found
        if (uut.RF.registers[1] == 120 || uut.RF.registers[2] == 120 || 
            uut.RF.registers[3] == 120 || uut.RF.registers[4] == 120 || 
            uut.RF.registers[5] == 120 || uut.RF.registers[10] == 120) begin
            $display("🎉 SUCCESS: Factorial result 120 found!");
            $display("✅ 5! = 120 calculation is CORRECT!");
        end else if (uut.RF.registers[1] == 60) begin
            $display("📊 PARTIAL SUCCESS: Found 60 (which is 5! / 2)");
            $display("   This suggests the calculation is halfway through");
            $display("   The program may be in a recursive loop");
            $display("   Expected: 60 × 2 × 1 = 120");
        end else if (uut.RF.registers[1] > 0 || uut.RF.registers[2] > 0 || 
                     uut.RF.registers[3] > 0 || uut.RF.registers[4] > 0 || 
                     uut.RF.registers[5] > 0 || uut.RF.registers[10] > 0) begin
            $display("📊 Partial results found:");
            $display("   x1=%d, x2=%d, x3=%d, x4=%d, x5=%d, x10=%d", 
                     uut.RF.registers[1], uut.RF.registers[2], uut.RF.registers[3],
                     uut.RF.registers[4], uut.RF.registers[5], uut.RF.registers[10]);
            $display("   (Calculation may still be in progress or stuck in loop)");
        end else begin
            $display("⚠️  No factorial result found yet.");
            $display("   (Calculation may need more time)");
        end

        $display("==========================================");
        $display("----- Complete Factorial Test Complete -----");
        $finish;
    end

    // Monitor key processor activity
    initial begin
        $display("Time\tPC\t\tInstr\t\tALU_Out\tx1\tx2\tx5");
        $monitor("%0t\t%h\t%h\t%d\t%d\t%d\t%d", 
                 $time, uut.PC, uut.Instr, uut.ALU_out,
                 uut.RF.registers[1], uut.RF.registers[2], uut.RF.registers[5]);
    end

    // Track calculation progress and detect factorial result
    always @(posedge clk) begin
        if (!rst) begin
            cycle_count = cycle_count + 1;
            
            // Check for factorial result in different registers
            if (uut.RF.registers[1] == 120 || uut.RF.registers[2] == 120 || 
                uut.RF.registers[3] == 120 || uut.RF.registers[4] == 120 || 
                uut.RF.registers[5] == 120 || uut.RF.registers[10] == 120) begin
                if (result_found == 0) begin
                    result_found = 1;
                    $display("🎯 FACTORIAL RESULT FOUND: 120");
                    $display("   Found in register at cycle %d", cycle_count);
                end
            end
            
            // Track significant register changes
            if (uut.RF.registers[1] != previous_result && uut.RF.registers[1] > 0) begin
                previous_result = uut.RF.registers[1];
                $display("📈 Register x1 updated to: %d (cycle %d)", uut.RF.registers[1], cycle_count);
                
                // Analyze the progress
                if (uut.RF.registers[1] == 12) begin
                    $display("   → 12 = 5 × 4 × 3 / 5 (first multiplication)");
                end else if (uut.RF.registers[1] == 60) begin
                    $display("   → 60 = 5 × 4 × 3 (partial factorial)");
                    $display("   → Need: 60 × 2 × 1 = 120 to complete 5!");
                end else if (uut.RF.registers[1] == 120) begin
                    $display("   → 120 = 5! = 5 × 4 × 3 × 2 × 1 (COMPLETE!)");
                end
            end
        end
    end

endmodule
